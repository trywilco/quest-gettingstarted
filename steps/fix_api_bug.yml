id: fix_api_bug
learningObjectives: 
  - Fixing an API bug 
hints:
  - Try to get an item with no image from the API
startFlow:
  do:
    - actionId: bot_message
      params:
        person: head-of-rd
        messages:
          - text: You know what I hate more than bugs?
            delay: 700
          - text: Bugs that just won't go away.
            delay: 1200
          - text: Looks like the root cause for your bug is still out there, and we're forming a hunting party. Its participants? You.
            delay: 1700
          - text:  Yeah, you guessed right - we fixed the bug in the UI, but someone used our API and the bug is still happening in the backend.
            delay: 2000
          - text: What I need you to do is identify the problematic API, and make sure it always returns a product image. 
            delay: 1700
          - text: Once you're done, open a PR so I can make sure everything's back to normal
            delay: 1200
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: "${eventType}"
      cases:
        github_pr_opened:
          do:
            - actionId: github_pr_comment
              params:
                person: head-of-rd
                message: "On it! I'll review the changes as soon as possible! "
        github_pr_workflow_complete_success:
          do:
            - actionId: bot_message
              params:
                person: head-of-rd
                messages:
                  - text: "Perfect ${user.githubuser}! You're now able to merge the PR."
                    delay: 1500
            - actionId: github_pr_approve
              params:
                person: head-of-rd
                message: "Perfect ${user.firstName}! You're now able to merge the PR."
        github_pr_workflow_complete_failure:
          do:
            - actionId: github_pr_reject
              params:
                person: head-of-rd
                message: I don't think it'll work. Make sure it passes all checks, and  only then you'll be able to merge the PR.

            - actionId: bot_message
              params:
                person: head-of-rd
                messages:
                  - text: I don't think it'll work. Make sure it passes all checks, and  only then you'll be able to merge the PR.
                    delay: 500
                  - text: If you don't know where to start, I suggest looking at the logs of the failed checks that were performed on your PR.
                    delay: 300
                  - text: This can provide valuable information and help you understand what went wrong.
                    delay: 500
        github_pr_merged:
          do:
            - actionId: finish_step

githubActions:
  backend:
    capabilities:
      - axios
      - dotenv
    testFile: "backend.js"

solution:
  do:
    - actionId: bot_message
      params:
        messages:
          - text: Similar with the UI bug, we should start by figuring out the root cause, and try to reproduce it.
          - text: What's the backend API that lets us fetch items?
          - text: | 
              We can dig through the backend code, or just examine the network calls on the frontend, and see that there are two routes for fetching items:
              - `/api/items`
              - `/api/items/${slug}`
          - text: |
              Let's use cURL to get the list of items, just run `curl <backend-address>/api/items` in your console (tip: you can add `| json_pp` in the end of the command, to get the output pretty printed). The result should be something like -
              ```
              $ curl https://roger-wilco-redesigned-space-waddle-jp5ppqpx6p4cq9ww-3000.preview.app.github.dev/api/items | json_pp
              > {
                "items" : [
                    {
                      "createdAt" : "2022-12-14T13:50:01.973Z",
                      "description" : "Description",
                      "favorited" : false,
                      "favoritesCount" : 0,
                      "image" : "", <--- no image!
                      "seller" : {
                          "following" : false,
                          "image" : "https://static.productionready.io/images/smiley-cyrus.jpg",
                          "username" : "roger-wilco"
                      },
                      "slug" : "title-zi5pit",
                      "tagList" : [],
                      "title" : "Title",
                      "updatedAt" : "2022-12-14T13:50:01.973Z"
                    }
                ],
                "itemsCount" : 1
              }
              ```
            delay: 2000
          - text: |
              Once we've identified the root cause, solving it is fairly easy! A very common architecture in web-servers is:
              - Have a model that define what the data looks like
              - Fetch one or more elements
              - Transform and serialize the data into `json` format. At this point, we can omit data we don't want to send to the client, or add some new properties
          - text: The last step is exactly where we can fix our problem! 
          - text: All you need to do is identify this part in the code, and make sure to send a placeholder image in case the database is missing one
